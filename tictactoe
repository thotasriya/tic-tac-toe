import math

# Define the board and the players
board = [
    [' ', ' ', ' '],
    [' ', ' ', ' '],
    [' ', ' ', ' ']
]

player = 'X'
ai = 'O'

# Function to print the board
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Function to check for available spots on the board
def get_available_moves(board):
    moves = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                moves.append((i, j))
    return moves

# Function to check if a player has won
def check_winner(board, player):
    for row in board:
        if all([spot == player for spot in row]):
            return True

    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True

    return False

# Function to check if the board is full
def is_board_full(board):
    return all([spot != ' ' for row in board for spot in row])

# Minimax algorithm implementation
def minimax(board, depth, is_maximizing):
    if check_winner(board, ai):
        return 1
    if check_winner(board, player):
        return -1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for move in get_available_moves(board):
            board[move[0]][move[1]] = ai
            score = minimax(board, depth + 1, False)
            board[move[0]][move[1]] = ' '
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for move in get_available_moves(board):
            board[move[0]][move[1]] = player
            score = minimax(board, depth + 1, True)
            board[move[0]][move[1]] = ' '
            best_score = min(score, best_score)
        return best_score

# Function to get the best move for the AI
def best_move(board):
    best_score = -math.inf
    move = None
    for possible_move in get_available_moves(board):
        board[possible_move[0]][possible_move[1]] = ai
        score = minimax(board, 0, False)
        board[possible_move[0]][possible_move[1]] = ' '
        if score > best_score:
            best_score = score
            move = possible_move
    return move

# Function to make a move on the board
def make_move(board, move, player):
    if board[move[0]][move[1]] == ' ':
        board[move[0]][move[1]] = player
        return True
    return False

# Main game loop
while True:
    print_board(board)
    if check_winner(board, player):
        print("Player wins!")
        break
    if check_winner(board, ai):
        print("AI wins!")
        break
    if is_board_full(board):
        print("It's a tie!")
        break

    # Player's move
    player_move = tuple(map(int, input("Enter your move (row and column): ").split()))
    if make_move(board, player_move, player):
        print_board(board)
    else:
        print("Invalid move! Try again.")
        continue

    # AI's move
    ai_move = best_move(board)
    if ai_move:
        make_move(board, ai_move, ai)
    else:
        print("AI cannot make a move. It's a tie!")
        break
